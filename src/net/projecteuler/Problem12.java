package net.projecteuler;

/**
 * 
 *The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */
public class Problem12 {
	public static void main(String[] args) {
		// 1 get the triangle numbers
		while(true){
			long value = getNextTriangleN();
			int dn = getDivisorNPro(value);
//			System.out.println(value+","+dn);
			if(dn>500){
				System.out.println(value);
				break;
			}
		}
	}

	/**
	 * 求某数的约数的个数
	 * @param value
	 * @return
	 */
	public static int getDivisorN(long value) {
		int num = 0;
		for(long i=1;i<=value;i++){
			if(value % i == 0)
				num ++;
		}
		return num;
	}
	
	public static int getDivisorNPro(long value) {
		int num = 0;
		double sqrt = Math.sqrt(value);
		int sqr = (int) sqrt ;
		if(sqr == sqrt)
			num ++;
		for(int i=1;i<sqr;i++){
			if(value % i == 0)
				num += 2 ;
		}
		return num;
	}
	
	
	
	private static long n = 1;
	private static long v = 0;
	private static long getNextTriangleN() {
		v += n++;
		return v;
	}
}
